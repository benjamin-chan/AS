1                                                          The SAS System                           13:29 Wednesday, October 4, 2017

NOTE: Unable to open SASUSER.REGSTRY. WORK.REGSTRY will be opened instead.
NOTE: All registry changes will be lost at the end of the session.

WARNING: Unable to copy SASUSER registry to WORK registry. Because of this, you will not see registry customizations during this 
         session.
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M1) 
      Licensed to UNIVERSITY OF ALABAMA AT BIRMINGHAM - SFA - T&R, Site 70058223.
NOTE: This session is executing on the W32_ES08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 13.1
      SAS/ETS 13.1
      SAS/OR 13.1
      SAS/IML 13.1
      SAS/QC 13.1

NOTE: Additional host information:

 W32_ES08R2 WIN 6.1.7601 Service Pack 1 Server

--- PEER News and Updates ---

: SECURITY REMINDER :
Please remember not to copy any data files that contain PHI (protected health identifiers) to any of the shared folders.

 


NOTE: SAS initialization used:
      real time           0.17 seconds
      cpu time            0.14 seconds
      
1          *  University of Alabama at Birmingham                               *
2          *  AS project                                            *
3          **********************************************************************;
4          options pagesize=74 linesize=150 pageno=1 missing=' ' date FORMCHAR="|----|+|---+=|-/\<>*";
5          * Programmer    : Benjamin Chan <chanb@ohsu.edu>
6          * Creation date :
7          * Modify date   :
8          ;
9          %let cmt=queryFracturesControl; * type the name of your program here (without the filename extension);
10         %let pgm=&cmt..sas;
11         %include "lib\libname.sas" ;
NOTE: Libref STDC5P was successfully assigned as follows: 
      Engine:        SPDE 
      Physical Name: H:\studies\osteo\data\STD_files\5pct\
NOTE: Libref STD_SABR was successfully assigned as follows: 
      Engine:        SPDE 
      Physical Name: q:\data\std_SABER\
NOTE: Libref MPSTD was successfully assigned as follows: 
      Engine:        SPDE 
      Physical Name: h:\studies\mpcd\data\stddata\
NOTE: Libref UCBSTD was successfully assigned as follows: 
      Engine:        SPDE 
      Physical Name: q:\studies\AS\data\stddata\
NOTE: Libref UCB was successfully assigned as follows: 
      Engine:        SPDE 
      Physical Name: q:\studies\AS\data\UCB\
NOTE: Libref DT was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: V:\studies\AS\data
NOTE: Libref NDC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: W:\onenote\references\drug ndcs\sas data
127        footnote "&pgm.";
128        * footnote2 "%sysfunc(datetime(),datetime14.)";
2                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

129        title1 '--- AS project ---';
130        **********************************************************************;
131        options macrogen mlogic mprint symbolgen;
132        options nomacrogen nomlogic nomprint nosymbolgen;
133        
134        
135        ods html
136          body = "output\&cmt..html"
137          style = Statistical;
NOTE: Writing HTML Body file: output\queryFracturesControl.html
138        
139        
140        /*
141        FRACTURES
142        
143        See "ALGORITHMS TO ENHANCE SPECIFICITY OF FRACTURE IDENTIFICATION_ 100316.docx"
144        
145        Adapted from Lang's code in "001_fx_data.sas"
146        
147        
148        From: Chen, Lang [mailto:langchen@uabmc.edu]
149        Sent: Monday, July 24, 2017 8:56 AM
150        To: Benjamin Chan <chanb@ohsu.edu>
151        Subject: RE: fracture identification algorithm
152        
153        Here it is.
154        For 001_fx_data, find all fx related claim and run the algorithm.
155        Please ignore any code after line 476
156        Modify code from line 1 -50
157        
158        For 002_fx_epi_data
159        Define fx episode.
160        
161        Final output data is fx_dgns_&firstyr._&lastyr._4. Please let me if you have any questions.
162         */
163        
164        
165        /*
166        START OF 001_fx_data.sas
167         */
168        
169        
170        /*Assign "Broad" fracture site (fx_site) for all ICD9 diagnoses, outputting separately, so some records are cloned, then combining into one
170      !  file */
171        /*No longer using matched trauma files here*/
172        
173        %macro comballfxdgns;
174            data fx_dgns;
175                set UCB.tempFracDxAllControl (where = (diagCodeType = "Fracture code"));
176                    length fx_site $30 ;
177                    fx_site = '';
178                    if strip(DX) in: ('800' '801' '802' '803' '804') then           do; fx_site='(800-804) skull/face'; output; end;
179                    if strip(DX) in: ('805', '806') or strip(DX)='73313' then       do; fx_site='(805, 806, 73313) spine'; output; end;
180                    if strip(DX) in: ('807') then                                           do; fx_site='(807) rib/sternum/trachea'; output; end;
181                    if strip(DX) in: ('808') then                                           do; fx_site='(808) pelvis'; output; end;
182                    if strip(DX) in: ('809') then                                           do; fx_site='(809) trunk bones'; output; end;
183                    if strip(DX) in: ('810') then                                           do; fx_site='(810) clavicle'; output; end;
184                    if strip(DX) in: ('811') then                                           do; fx_site='(811) scapula'; output; end;
185                    if strip(DX) in: ('812') or strip(DX)='73311' then              do; fx_site='(812, 73311) humerus'; output; end;
186                    if strip(DX) in: ('813') or strip(DX)='73312' then              do; fx_site='(813, 73312) radius_ulna'; output; end;
187                    if strip(DX) in: ('814') then                                           do; fx_site='(814) carpal'; output; end;
188                    if strip(DX) in: ('815' '816' '817') then                           do; fx_site='(815-817) hand/fingers'; output; end;
189                    if strip(DX) in: ('818' '819') then                                     do; fx_site='(818-819) arms mult'; output; end;
190                    if strip(DX) in: ('820') or strip(DX) = '73314' then                do; fx_site='(820, 73314) hip'; output; end;
191                    if strip(DX) in: ('821') or strip(DX)='73315' then              do; fx_site='(821, 73315) femur'; output; end;
192                    if strip(DX) in: ('822') then                                           do; fx_site='(822) patella'; output; end;
193                    if strip(DX) in: ('823') or strip(DX)='73316' then              do; fx_site='(823, 73316) tib_fib'; output; end;
194                    if strip(DX) in: ('824') then                                           do; fx_site='(824) ankle'; output; end;
195                    if strip(DX) in: ('825') then                                           do; fx_site='(825) tarsal_metatarsal'; output; end;
196                    if strip(DX) in: ('826') then                                           do; fx_site='(826) foot_phalanges'; output; end;
197                    if strip(DX) in: ('827') then                                           do; fx_site='(827) lower_limb'; output; end;
198                    if strip(DX) in: ('828') then                                           do; fx_site='(828) legs+arm/rib'; output; end;
3                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

199                    if strip(DX) in: ('829') then                                           do; fx_site='(829) fx_nos'; output; end;
200                    if strip(DX) in ('73310' '73319' '7331') then                 do; fx_site='(7331) pathologic nos/nec'; output; end;
201            data fx_excare;
202                set UCB.tempFracDxAllControl (where = (diagCodeType = "Extended care code"));
203                    length fx_site $30 ;
204                    fx_site = '';
205                    /*Expanded Diagnosis Codes - Fracture Aftercare Codes*/
206                    if strip(DX) in ('V5410' 'V5420') then                          do; fx_site='(812, 73311) humerus'; output;
207                                                                                                     fx_site='(813, 73312) radius_ulna'; output;
207      ! end;
208                    if strip(DX) in ('V5411' 'V5421') then                          do; fx_site='(812, 73311) humerus'; output; end;
209                    if strip(DX) in ('V5412' 'V5422') then                          do; fx_site='(813, 73312) radius_ulna'; output;
210                                                                                                     fx_site='(814) carpal'; output; end;
211                    if strip(DX) in ('V5413' 'V5423') then                          do; fx_site='(820, 73314) hip'; output; end;
212                    if strip(DX) in ('V5414' 'V5424') then                          do; fx_site='(820, 73314) hip'; output;
213                                                                                                     fx_site='(821, 73315) femur'; output;
214                                                                                                     fx_site='(822) patella'; output;
215                                                                                                     fx_site='(824) ankle'; output;
216                                                                                                     fx_site='(823, 73316) tib_fib'; output; end;
217                    if strip(DX) in ('V5415' 'V5425') then                          do; fx_site='(820, 73314) hip'; output;
218                                                                                                     fx_site='(821, 73315) femur'; output;
219                                                                                                     fx_site='(822) patella'; output; end;
220                    if strip(DX) in ('V5416' 'V5426') then                          do; fx_site='(824) ankle'; output;
221                                                                                                     fx_site='(822) patella'; output;
222                                                                                                     fx_site='(823, 73316) tib_fib'; output; end;
223                    if strip(DX) in ('V5417' 'V5427') then                          do; fx_site='(805, 806, 73313) spine'; output; end;
224                    if strip(DX) in: ('V542') then                                       do; fx_site='(7331) pathologic nos/nec'; output; end;
225                    if strip(DX) in: ('V541') then                                       do; fx_site='(829) fx_nos'; output; end;
226            run;
227        
228            /* proc sort data=fx_dgns; by patid BEGIN_DATE fx_site; run;
229            proc sort data=fx_excare; by patid BEGIN_DATE fx_site; run; */
230        %mend;
231        %comballfxdgns;

NOTE: There were 0 observations read from the data set UCB.TEMPFRACDXALLCONTROL.
      WHERE diagCodeType='Fracture code';
NOTE: The data set WORK.FX_DGNS has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set UCB.TEMPFRACDXALLCONTROL.
      WHERE diagCodeType='Extended care code';
NOTE: The data set WORK.FX_EXCARE has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

232        
233        /*Now, assign a more specific fracture site (e.g., closed, other) (site) that is used in the CQ algorithms*/
234        /*Since Expanded Diagnosis Codes (V Codes) apply to sub-categories of each broad fracture site, clone records for these so they appear in
234      ! both places*/
235        
236        data fx_dgns_2;
237            set fx_dgns;
238        
239            length site $30;
240        
241            site="";
242        
243            *Spine-closed and Spine-other;
244            if fx_site='(805, 806, 73313) spine' then
245                do;
246                    site = 'spine_cls'; /*Includes V Codes and 73313 here*/
247                    if substr(strip(DX),1,3) in ('805' '806') and substr(strip(DX),1,4) ^in ('8050', '8052', '8054', '8058') then
248                        site = 'spine_oth';
249                end;
250        
4                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

251            *Pelvis-closed and Pelvis-other... No V Codes;
252            if fx_site='(808) pelvis' then
253                do;
254                    site = 'pelvis_cls';
255                    if substr(strip(DX),1,3)='808' and substr(strip(DX),1,4) ^in ('8080', '8082', '8084', '8088') then
256                        site = 'pelvis_oth';
257                end;
258        
259            *Clavicle-closed and Clavicle-other.... No V Codes;
260            if fx_site='(810) clavicle' then
261                do;
262                    site = 'clv_cls';
263                    if substr(strip(DX),1,3) = '810' and substr(strip(DX),1,4) ^in ('8100') then
264                        site = 'clv_oth';
265                end;
266        
267            *Humerus-closed and Humerus-other;
268            if fx_site='(812, 73311) humerus' then
269                do;
270                    site = 'hmrs_cls'; /*Includes V Codes and 73311 here*/
271                    if substr(strip(DX),1,3)= '812' and substr(strip(DX),1,4) ^in ('8120', '8122', '8124') then
272                        site = 'hmrs_oth';
273                end;
274        
275            *Distal radius/ulna and Radius/ulna-other;
276            if fx_site='(813, 73312) radius_ulna' then
277                do;
278                 site = 'dist4arm'; /*Includes V Codes and 73312 here*/
279                    if substr(strip(DX),1,3) = '813' and substr(strip(DX),1,4) ^in ('8134', '8135') then
280                        site = 'rad_ul_oth';
281                end;
282        
283            *Carpal... V Codes present but only one category;
284            if fx_site='(814) carpal' then
285                do;
286                    site = 'carpal';
287                 end;
288        
289            *Hip-closed and Hip-other;
290            if fx_site='(820, 73314) hip' then
291                    do;
292                    site = 'hip_cls'; /*Includes V Codes and 73314 here*/
293                    if substr(strip(DX),1,3)='820' and substr(strip(DX),1,4) ^in ('8200', '8202', '8208') then
294                        site = 'hip_oth';
295                end;
296        
297            *Other femur-closed and Other femur-other;
298            if fx_site='(821, 73315) femur' then
299                do;
300                    site = 'oth_fem_cls'; /*Includes V Codes and 73315 here*/
301                    if substr(strip(DX),1,3)='821' and substr(strip(DX),1,4) ^in ('8210', '8212') then
302                        site = 'oth_fem_oth';
303                end;
304        
305            *Tib/fib-closed and Tib/fib-other;
306            if fx_site='(823, 73316) tib_fib' then
307                do;
308                    site = 'tib_fib_cls'; /*Includes V Codes and 73316 here*/
309                    if substr(strip(DX),1,3)='823' and substr(strip(DX),1,4) ^in ('8230', '8232', '8238') then
310                        site = 'tib_fib_oth';
311                end;
312        
313            *Ankle... V Codes present but only one category;
314            if fx_site='(824) ankle' then
315                do;
316                    site = 'ankle';
317                end;
318        
319            /*Assign site for other fx_sites that do not have CQ algorithm and thus no sub categories*/
320            if site = "" then do;
321                site = fx_site;
322            end;
5                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

323        
324            label site = 'CQ Algorithm Fracture Site (Specific)';
325        
326        run;

NOTE: There were 0 observations read from the data set WORK.FX_DGNS.
NOTE: The data set WORK.FX_DGNS_2 has 0 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

327        
328        /*###########################################################################################################*/
329        /***************************************************Intermediate Fracture Diagnosis File**********************/
330        /*Combine CQ diagnosis files*******************************************************/
331        data fx_dgns_3;
332            set fx_dgns_2
333        /*    fx_excare_*/
334                ;
335        run;

NOTE: There were 0 observations read from the data set WORK.FX_DGNS_2.
NOTE: The data set WORK.FX_DGNS_3 has 0 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

336        
337        proc freq data=fx_dgns_3;
338            tables fx_site site;
339        run;

NOTE: No observations in data set WORK.FX_DGNS_3.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

340        
341        proc sort data=fx_dgns_3;
342            by patid ENCOUNTERID fx_site site;
343        run;

NOTE: Input data set is empty.
NOTE: The data set WORK.FX_DGNS_3 has 0 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

344        
345        
346        /*###########################################################################################################*/
347        /*************************************************************************************************************/
348        /*Look for repair procedures and assign treatment site*******************/
349        /*This code has been updated to include hip/femur replacement with matching diagnosis code, also looked in claim strip(DX) not just primary
349      !  strip(DX)
350        /*Not accepting contiguous sites until later*/
351        /*Excluding procedures from DME files*/
352        /*******************************Select All Spine Imaging Codes from STD Procedure Files for CQ=4/5 algorithms*/
353        
354        %macro fx_prcd;
355            data fx_prcd spine_xray;
356                set UCB.tempFracPxAllControl;
357        
358                    length tx_site $30;
359                    length HLAT $1;
360        
361                    if strip(px) in ('21300' '21310' '21315' '21320' '21325' '21330' '21335' '21336' '21337' '21338' '21339' '21340' '21343'
361      ! '21344' '21345' '21346' '21347' '21348'
6                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

362                                         '21355' '21356' '21360' '21365' '21366' '21385' '21386' '21387' '21390' '21395' '21400' '21401' '21406'
362      ! '21407' '21408' '21421' '21422' '21423'
363                                         '21431' '21432' '21433' '21435' '21436' '21440' '21445' '21450' '21451' '21452' '21453' '21454' '21461'
363      ! '21462' '21465' '21470'
364                                         '62000' '62005' '62010')  and lengthn(strip(px)) = 5 then do;
365                        tx_site='(800-804) skull/face'; output fx_prcd; end;
366        
367                    if strip(px) in ('22305' '22310' '22315' '22318' '22319' '22325' '22326' '22327' '22328' '22520' '22521' '22522' '22523'
367      ! '22524' '22525' '76012' '76013'
368                                         'S2360' 'S2361' 'S2362' 'S2363' '72291' '72292')  and lengthn(strip(px)) = 5 then do;
369                        tx_site = '(805, 806, 73313) spine'; output fx_prcd; end;
370        
371                    if  strip(px) in ('21493' '21494' '21495' '21800' '21805' '21810' '21820' '21825' ) then do;
372                        tx_site='(807) rib/sternum/trachea'; output fx_prcd; end;
373        
374                    if strip(px) in ('27193' '27194' '27215' '27216' '27217' '27218' '27220' '27222' '27226' '27227' '27228')  and
374      ! lengthn(strip(px)) = 5 then do;
375                        tx_site = '(808) pelvis'; output fx_prcd; end;
376        
377                    if strip(px) in ('23500' '23505' '23515')  and lengthn(strip(px)) = 5 then do;
378                        tx_site = '(810) clavicle'; output fx_prcd; end;
379        
380                    if strip(px) in ('23570' '23575' '23585') then do;
381                        tx_site= '(811) scapula'; output fx_prcd; end;
382        
383                    if strip(px) in ('23600' '23605' '23615' '23616' '23620' '23625' '23630' '23665' '24500' '24505' '24515' '24516' '24530'
383      ! '24535' '24538' '24545' '24546' '24560'
384                                 '24565' '24566' '24575' '24576' '24577' '24579' '24582')  and lengthn(strip(px)) = 5 then do;
385                        tx_site = '(812, 73311) humerus'; output fx_prcd; end;
386        
387                    if strip(px) in ('25600' '25605' '25606' '25607' '25608' '25609' '25620' '25650' '25651' '25652')  and lengthn(strip(px)) = 5
387      ! then do;
388                        tx_site = '(813, 73312) radius_ulna'; output fx_prcd; end; /*Procedure codes are the same for both categories*/
389        
390                    if strip(px) in ('24650' '24655' '24665' '24666' '24670' '24675' '24685' '25500' '25505' '25515' '25520' '25525' '25526'
390      ! '25530' '25535' '25545' '25560' '25565'
391                                 '25574' '25575')  and lengthn(strip(px)) = 5 then do;
392                        tx_site = '(813, 73312) radius_ulna'; output fx_prcd; end; /*Procedure codes are the same for both categories*/
393        
394                    if strip(px) in ('25622' '25624' '25628' '25630' '25635' '25645' '25680' '25685')  and lengthn(strip(px)) = 5 then do;
395                        tx_site = '(814) carpal'; output fx_prcd; end;
396        
397                    if strip(px) in ('26600' '26605' '26607' '26608' '26615' '26645' '26650' '26665' '26720' '26725' '26727' '26735' '26740'
397      ! '26742' '26746' '26750' '26755' '26756' '26765' )
398                               and lengthn(strip(px)) = 5 then do;
399                        tx_site='(815-817) hand/fingers'; output fx_prcd; end;
400        
401                    if '27230' <= strip(px) <= '27248' and lengthn(strip(px)) = 5 then do;
402                        tx_site = '(820, 73314) hip'; output fx_prcd; end;
403        
404                    if '27500' <= strip(px) <= '27514'  and lengthn(strip(px)) = 5 then do;
405                        tx_site = '(821, 73315) femur'; output fx_prcd; end;
406        
407                    if strip(px) in ('27520' '27524')  and lengthn(strip(px)) = 5 then do;
408                        tx_site = '(822) patella'; output fx_prcd; end;
409        
410                    if ('27530' <= strip(px) <= '27536' or '27750' <= strip(px) <= '27759' or '27780' <= strip(px) <= '27784' or '27824' <=
410      ! strip(px) <= '27828') and lengthn(strip(px)) = 5  then do;
411                        tx_site = '(823, 73316) tib_fib'; output fx_prcd; end;
412        
413                    if strip(px) in ('27760' '27762' '27766' '27786' '27788' '27792' '27808' '27810' '27814' '27816' '27818' '27822' '27823'
413      ! '28430' '28435' '28436' '28445')  and lengthn(strip(px)) = 5 then do;
414                        tx_site = '(824) ankle'; output fx_prcd; end;
415        
416                    if strip(px) in ('28320' '28322' '28400' '28405' '28406' '28415' '28420' ) and lengthn(strip(px)) = 5 then do;
417                        tx_site='(825) tarsal_metatarsal'; output fx_prcd; end;
418        
419                 /********************************Hip/Femur Additions - must be matched with DGNS to be included*/
420                 /*Hip replacement codes*/
421                    /*Hip*/
422                    if strip(px) in ('27130' '27125') and lengthn(strip(px)) = 5  then do;
423                        HLAT='1'; tx_site = '(820, 73314) hip'; output fx_prcd; end;
7                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

424        
425                    /*Codes below are the only ICD9 Procedure Codes that we are using for "repair"*/
426                    if strip(px) in ('8151' '8152') and lengthn(strip(px)) = 4 then do;
427                        HLAT = '1'; tx_site = '(820, 73314) hip'; output fx_prcd; end;
428        
429                    /*Femur repair codes, assigned to both Hip and Femur treatment sites... CHECK - MAYBE WE NEED TO DO THIS THE OTHER WAY AS
429      ! WELL*/
430                    /*Hip*/
431                    if strip(px) in ('7855' '7905' '7915' '7925' '7935' '7965') and lengthn(strip(px)) = 4 then do;
432                        HLAT = '1'; tx_site = '(820, 73314) hip'; output fx_prcd; end;
433        
434                    /*Femur*/
435                    if strip(px) in ('7855' '7905' '7915' '7925' '7935' '7965') and lengthn(strip(px)) = 4 then do;
436                        HLAT = '1'; tx_site = '(821, 73315) femur'; output fx_prcd; end;
437                     /*spine image*/
438                        if '72010' <= strip(px) <= '72159' or '72240' <= strip(px) <= '72285' or strip(px) = '72295' then do;   /*Spine Imaging
438      ! Codes*/
439                        tx_site='(805, 806, 73313) spine';
440                        output spine_xray; end;
441        
442            run;
443        
444            data fx_prcd;
445                set fx_prcd;
446                /*To add laterality info*/
447        /*        array hcpcs{*} hcpcs_1st_mdfr_cd hcpcs_2nd_mdfr_cd hcpcs_3rd_mdfr_cd hcpcs_4th_mdfr_cd ; */
448                if HLAT='1' then do;
449                    repair_right='0'; repair_left='0';
450                end;
451        /*        if HLAT='1' then */
452        /*            do i=1 to dim(hcpcs);*/
453        /*                if hcpcs{i} = 'RT' then repair_right='1';*/
454        /*                else if hcpcs{i} = 'LT' then repair_left='1';*/
455        /*            end;*/
456            run;
457            proc sort data=fx_prcd nodupkey; by patid ENCOUNTERID px_date tx_site; run;
458        
459            data spine_xray;
460                set spine_xray;
461                keep patid px_date tx_site  ENCOUNTERID begin_date;
462            run;
463            proc sort data=spine_xray nodupkey; by patid px_date; run;
464        %mend;
465        %fx_prcd;

NOTE: There were 0 observations read from the data set UCB.TEMPFRACPXALLCONTROL.
NOTE: The data set WORK.FX_PRCD has 0 observations and 21 variables.
NOTE: The data set WORK.SPINE_XRAY has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set WORK.FX_PRCD.
NOTE: The data set WORK.FX_PRCD has 0 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.FX_PRCD has 0 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set WORK.SPINE_XRAY.
8                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

NOTE: The data set WORK.SPINE_XRAY has 0 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.SPINE_XRAY has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

466        
467        
468        
469        data trauma (rename=(begin_date=trauma_dt));
470                set UCB.tempFracDxAllControl (where = (diagCodeType = "Trauma code"));
471        run;

NOTE: There were 0 observations read from the data set UCB.TEMPFRACDXALLCONTROL.
      WHERE diagCodeType='Trauma code';
NOTE: The data set WORK.TRAUMA has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

472        proc sort data= trauma(keep=patid trauma_dt) nodupkey; by patid trauma_dt;run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TRAUMA has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

473        
474        
475        /*subset the spine xray procedure claim for patients with fx diagnosis code only*/
476        /*so SAS will not run out of memory*/
477        data fx_spine_xray(keep=patid tx_site px_date ENCOUNTERID begin_date);
478        if _n_=1 then do;
479          declare hash hid(dataset:"fx_dgns_3(where=(fx_site='(805, 806, 73313) spine')))", multidata:"N", hashexp:20);
480          rc=hid.defineKey("patid");
481          rc=hid.defineDone();
482        end;
483        set spine_xray;
484        rc=hid.find();
485        if rc=0;
486        run;

NOTE: There were 0 observations read from the data set WORK.FX_DGNS_3.
      WHERE fx_site='(805, 806, 73313) spine';
NOTE: There were 0 observations read from the data set WORK.SPINE_XRAY.
NOTE: The data set WORK.FX_SPINE_XRAY has 0 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

487        /*subset the Trauma code for patients with fx diagnosis code only*/
488        /*so SAS will not run out of memory*/
489        data fx_trauma(drop=rc);
490        if _n_=1 then do;
491          declare hash hid(dataset:"fx_dgns_3", multidata:"N", hashexp:20);
492          rc=hid.defineKey("patid");
493          rc=hid.defineDone();
494        end;
9                                                                   The SAS System                                    13:29 Wednesday, October 4, 2017

495        set trauma;
496        rc=hid.find();
497        if rc=0;
498        run;

NOTE: There were 0 observations read from the data set WORK.FX_DGNS_3.
NOTE: There were 0 observations read from the data set WORK.TRAUMA.
NOTE: The data set WORK.FX_TRAUMA has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

499        /************************************Link Fracture Claims (ICD9 Diagnosis) with Repair Claims (CPT/HCPCS, some ICD9 procedure
499      ! code)***************/
500        
501        data fx_dgns_4(drop=rc: px_date tx_site xray_date trauma_dt);
502        if _n_=1 then do;
503          declare hash hid(dataset:"fx_prcd", multidata:"N", hashexp:20);
504          rc=hid.defineKey("patid", "px_date", "tx_site");
505        /*  rc=hid.defineData("px_date", "tx_site");*/
506          rc=hid.defineDone();
507          declare hash hxray(dataset:"fx_spine_xray(rename=px_date=xray_date)", multidata:"Y", hashexp:20);
508          rc=hxray.defineKey("patid", "tx_site");
509          rc=hxray.defineData("xray_date");
510          rc=hxray.defineDone();
511          declare hash htrauma(dataset:"fx_trauma", multidata:"Y", hashexp:20);
512          rc=htrauma.defineKey("patid");
513          rc=htrauma.defineData("trauma_dt");
514          rc=htrauma.defineDone();
515        end;
516        if 0 then set fx_prcd(keep=patid px_date tx_site)
517                      fx_spine_xray(keep=patid px_date tx_site rename=px_date=xray_date)
518                      fx_trauma;
519        set fx_dgns_3;
520        length cq $4 spine_image trauma_date 4 trauma $1;
521        format spine_image trauma_date mmddyy10.;
522        cq="0000";
523        rc=hid.find(key:patid, key:begin_date,key:fx_site);
524        if rc^=0 then do;
525            px_date=.;
526            tx_site=" ";
527        end;
528        if enc_type="IP" then do;
529        /*CQ = 1 Inpatient claim with primary diagnosis code */
530            if pdx="P" then substr(cq,1,1)="1";
531        /*CQ = 2 Inpatient claim with secondary diagnosis code*/
532            else substr(cq,2,1)="2";
533        end; else do;
534        /*CQ = 3 outpatient diagnosis code AND carrier line with repair/replace HCPCS*/
535            if rc=0 then substr(cq,3,1)="3";
536            rc1=hxray.find(key:patid, key:fx_site);
537            do while (rc1 = 0);
538                if begin_date-10 <=xray_date<= begin_date then do;
539                    if enc_type in ("AV" "IF" "NH" "HH" "ER" "ED") then do;
540        /*CQ = 4 outpatient [Physician E&M codes] diagnosis code with spine image/x-ray within 10 day early*/
541                        substr(cq,4,1)="4";
542                        spine_image=min(spine_image,xray_date);
543                    end;
544                end;
545                rc1=hxray.find_next(key:patid, key:fx_site);
546            end;
547        end;
548        /*is there trauma dx within 14 days*/
549        rc2=htrauma.find(key:patid);
550        do while (rc2 = 0) ;
551            if 0<=abs(trauma_dt-begin_date)<=14 then do;
552                    trauma="1";
553                    trauma_date=min(trauma_date,trauma_dt);
554           end ;
555           rc2=htrauma.find_next(key:patid) ;
556        end;
10                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

557        
558        run;

NOTE: There were 0 observations read from the data set WORK.FX_PRCD.
NOTE: There were 0 observations read from the data set WORK.FX_SPINE_XRAY.
NOTE: There were 0 observations read from the data set WORK.FX_TRAUMA.
NOTE: There were 0 observations read from the data set WORK.FX_DGNS_3.
NOTE: The data set WORK.FX_DGNS_4 has 0 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

559        proc freq data=fx_dgns_4; tables enc_type*cq fx_site*cq trauma/missing;run;

NOTE: No observations in data set WORK.FX_DGNS_4.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

560        
561        *goto 002_fx_epi.sas;
562        
563        
564        
565        
566        /*
567        START OF 002_fx_data.sas
568         */
569        
570        /*all the claims to define episode sequence */
571        data _dat0(keep=
572        PATID ENCOUNTERID ADMIT_DATE DISCHARGE_DATE BEGIN_DATE END_DATE DX DX_TYPE PDX  /* SOURCE */ ENC_TYPE fx_site px px_date
573        site cq spine_image trauma_date trauma );
574        set fx_dgns_4 fx_excare Fx_prcd(rename=tx_site=fx_site);
575        run;

NOTE: There were 0 observations read from the data set WORK.FX_DGNS_4.
NOTE: There were 0 observations read from the data set WORK.FX_EXCARE.
NOTE: There were 0 observations read from the data set WORK.FX_PRCD.
NOTE: The data set WORK._DAT0 has 0 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

576        proc sort data=_dat0; by PATID fx_site BEGIN_DATE END_DATE; run;

NOTE: Input data set is empty.
NOTE: The data set WORK._DAT0 has 0 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

577        /*for each claim define start and end date applicable to IP NH and NH*/
578        data _dat1;
579        set _dat0;
580        length start_date end_date 4;
581        format start_date end_date mmddyy10.;
582        by PATID fx_site BEGIN_DATE END_DATE;
583        start_date=min(ADMIT_DATE, BEGIN_DATE);
584        end_date=max(DISCHARGE_DATE, End_DATE);
585        run;

NOTE: There were 0 observations read from the data set WORK._DAT0.
NOTE: The data set WORK._DAT1 has 0 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      
11                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017


586        proc sort data=_dat1; by PATID fx_site start_date end_date; run;

NOTE: Input data set is empty.
NOTE: The data set WORK._DAT1 has 0 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

587        
588        /* generate unique episode sequence ID */
589        data _dat2(drop=end_date_max lag_end_date_max _gap);
590        set _dat1;
591        length lag_end_date_max end_date_max 4;
592        format lag_end_date_max end_date_max mmddyy10.;
593        
594        by PATID fx_site start_date end_date;
595        retain seq 0;
596        
597        /*if current claims end date > all previouse claim end date in sequence, then update*/
598        end_date_max=max(end_date,end_date_max);
599        lag_end_date_max=lag(end_date_max);
600        
601        if first.fx_site then lag_end_date_max=.;
602        _gap=start_date-lag_end_date_max;
603        
604        /*if current claims start date >90 days after all previouse claim end date in sequence,
605        then start new sequence*/
606        if first.fx_site or start_date-lag_end_date_max>90 then do;
607            end_date_max=end_date;
608        
609            seq+1;
610        end;
611        run;

NOTE: There were 0 observations read from the data set WORK._DAT1.
NOTE: The data set WORK._DAT2 has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

612        proc sort data=_dat2; by seq;run;

NOTE: Input data set is empty.
NOTE: The data set WORK._DAT2 has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

613        proc sql;
614        /*episode sequence start date*/
615        create table seq_start as
616        select patid, seq, min(start_date) as seq_start_date length=4 format=mmddyy10.
617         from _dat2
618         where substr(dx,1,4) not in ('V541' 'V542')
619         group by patid, seq
620         order by patid, seq;
NOTE: Table WORK.SEQ_START created, with 0 rows and 3 columns.

621        /*episode sequence end date*/
622        create table seq_end as
623        select patid, seq,
624         max(start_date) as seq_end_date length=4 format=mmddyy10. from _dat2
625         group by patid, seq
626         order by patid, seq;
NOTE: Table WORK.SEQ_END created, with 0 rows and 3 columns.

627        quit;
NOTE: PROCEDURE SQL used (Total process time):
12                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

      real time           0.10 seconds
      cpu time            0.04 seconds
      

628        /*episode sequence case qualifier indicator and trauma*/
629        data seq_cq(keep=patid seq seq_cq seq_trauma fx_site);
630        set _dat2;
631        by patid seq;
632        length seq_cq $4 seq_trauma $1;
633        retain seq_cq seq_trauma;
634        if first.seq then do;
635            seq_cq="0000";
636            seq_trauma="0";
637        end;
638        if trauma="1" then seq_trauma=trauma;
639        do i=1 to 4;
640        if substr(cq,i,1)>substr(seq_cq,i,1) then substr(seq_cq,i,1)=substr(cq,i,1);
641        end;
642        if last.seq then output;
643        run;

NOTE: There were 0 observations read from the data set WORK._DAT2.
NOTE: The data set WORK.SEQ_CQ has 0 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

644        proc freq data=seq_cq; tables seq_cq seq_trauma fx_site; run;

NOTE: No observations in data set WORK.SEQ_CQ.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

645        
646        data seq_cq_date;
647        merge seq_cq seq_start seq_end;
648        by patid seq;
649        length site_order $1;
650        if fx_site='(820, 73314) hip' then site_order='1';
651        if fx_site='(821, 73315) femur' then site_order='2';
652        if fx_site='(808) pelvis' then site_order='3';
653        if fx_site='(805, 806, 73313) spine' then site_order='4';
654        if fx_site='(812, 73311) humerus' then site_order='5';
655        if fx_site='(813, 73312) radius_ulna' then site_order='6';
656        if fx_site='(823, 73316) tib_fib' then site_order='7';
657        if fx_site='(824) ankle' then site_order='8';
658        if fx_site='(810) clavicle' then site_order='9';
659        run;

NOTE: There were 0 observations read from the data set WORK.SEQ_CQ.
NOTE: There were 0 observations read from the data set WORK.SEQ_START.
NOTE: There were 0 observations read from the data set WORK.SEQ_END.
NOTE: The data set WORK.SEQ_CQ_DATE has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

660        
661        data _tmp_combo;
662        set seq_cq_date;
663        where site_order^=" " and seq_cq^="0000" and seq_cq^=" ";
664        run;

NOTE: There were 0 observations read from the data set WORK.SEQ_CQ_DATE.
      WHERE (site_order not = ' ') and seq_cq not in (' ', '0000');
NOTE: The data set WORK._TMP_COMBO has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
13                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

      cpu time            0.00 seconds
      

665        
666        * define combo or alone fx;
667        data seq_COMBO(
668        keep=patid seq seq_cq seq_start_date alone_combo fx_site site_order)
669        ;
670        if _n_=1 then do;
671            declare hash hpid(dataset:"_tmp_combo(where=(seq_cq^='0000' and seq_cq^=' ')
672                    rename=(seq_start_date=seq_start_date2  fx_site= fx_site_combo seq=seq_COMBO))", ordered: 'a', multidata:"Y");
673            rc=hpid.defineKey("patid");
674            rc=hpid.defineData("patid","seq_start_date2", "fx_site_combo", "seq_COMBO");
675            rc=hpid.defineDone();
676        end;
677        if 0 then set _tmp_combo(rename=(seq_start_date=seq_start_date2 fx_site= fx_site_combo seq=seq_COMBO));
678        set _tmp_combo(where=(seq_cq^="0000" and seq_cq^=" ") );
679        by patid seq;
680        length  index_fx_begin 4 alone_combo $5;
681        alone_combo="alone";
682            format index_fx_begin mmddyy10.;
683            index_fx_begin=seq_start_date;
684        
685         rc=hpid.find(key:patid);
686        
687         do while (rc = 0);
688         if rc=0 and abs(seq_start_date-seq_start_date2) <=30 and fx_site_combo^=fx_site then alone_combo= 'combo';
689         rc=hpid.find_next();
690         *hpid.has_next(result:r);
691        end;
692        if alone_combo="alone" then do;
693            seq_start_date2=.; fx_site_combo=" "; seq_COMBO=.;
694        end;
695        run;

NOTE: There were 0 observations read from the data set WORK._TMP_COMBO.
      WHERE seq_cq not in (' ', '0000');
NOTE: There were 0 observations read from the data set WORK._TMP_COMBO.
      WHERE seq_cq not in (' ', '0000');
NOTE: The data set WORK.SEQ_COMBO has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

696        proc freq data=seq_COMBO; tables alone_combo; run;

NOTE: No observations in data set WORK.SEQ_COMBO.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

697        
698        proc sort data = Work.seq_COMBO;
699          by patid seq_start_date;
700        run;

NOTE: Input data set is empty.
NOTE: The data set WORK.SEQ_COMBO has 0 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

701        
702        data combo_seq;
703        set seq_COMBO;
704        by patid seq_start_date;
705        length combo_fx_site $30. combo_seq 4;
706        retain combo_seq 0 combo_fx_site;
707        if first.patid or seq_start_date-lag(seq_start_date) then combo_seq=1+combo_seq;
14                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

708        where seq_cq^='0000' and seq_cq^=' ';
709        if combo_fx_site=" " or ""<site_order<lag(site_order) then combo_fx_site=fx_site;
710        run;

NOTE: There were 0 observations read from the data set WORK.SEQ_COMBO.
      WHERE seq_cq not in (' ', '0000');
NOTE: The data set WORK.COMBO_SEQ has 0 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

711        
712        proc sort data = Work.seq_COMBO;
713          by patid seq;
714        run;

NOTE: Input data set is empty.
NOTE: The data set WORK.SEQ_COMBO has 0 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

715        
716        data FX_CLM_DB;
717        merge _dat2 seq_start seq_end seq_cq(drop=fx_site) seq_COMBO(keep=patid seq alone_combo);
718        by patid seq;
719        run;

NOTE: There were 0 observations read from the data set WORK._DAT2.
NOTE: There were 0 observations read from the data set WORK.SEQ_START.
NOTE: There were 0 observations read from the data set WORK.SEQ_END.
NOTE: There were 0 observations read from the data set WORK.SEQ_CQ.
NOTE: There were 0 observations read from the data set WORK.SEQ_COMBO.
NOTE: The data set WORK.FX_CLM_DB has 0 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

720        
721        proc sql;
722        select count(distinct seq) from FX_CLM_DB;
                                                                  --- AS project ---                              13:29 Wednesday, October 4, 2017   1

                                                                               
                                                                       --------
                                                                              0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                                              queryFracturesControl.sas
723        quit;
NOTE: The PROCEDURE SQL printed page 1.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

724        
725        
726        
727        
728        /*
729        Collapse to fracture episodes
730        
731        Q: Why are some seq_start_date values missing?
732         */
733        proc sort
734          data = Work.fx_clm_db
735          out = Work.fractureEpisodes (drop = seq
736                                       rename = (seq_start_date = fractureEpisodeStart
737                                                 seq_end_date = fractureEpisodeEnd
738                                                 fx_site = fractureSite))
739          nodupkey;
740          by patid seq seq_start_date seq_end_date fx_site;
741        run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
15                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

NOTE: The data set WORK.FRACTUREEPISODES has 0 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

742        
743        proc sql;
744          create table DT.fractureEpisodesPrevControl as
745            select A.database,
746                   A.cohort,
747                   A.indexDate,
748                   A.controlID,
749                   A.age,
750                   A.sex,
751                   B.*,
752                   case
753                     when prxmatch("/spine/", B.fractureSite) then "Clinical vertebral fracture"
754                     when prxmatch("/(hip)|(pelvis)|(femur)|(humerus)|(radius)|(ulna)/", B.fractureSite) then "Non-vertebral osteoporotic fracture"
755                     else ""
756                     end as fractureType
757            from DT.controlLookup A inner join
758                 Work.fractureEpisodes B on (A.patid = B.patid);
NOTE: Table DT.FRACTUREEPISODESPREVCONTROL created, with 0 rows and 31 columns.

759          create table Work.summaryFractureEpisodesPrev as
760            select "DT.fractureEpisodesPrevControl" as table,
761                   fractureType, fractureSite,
762                   count(distinct patid) as countDistinctPatid,
763                   count(*) as countFractureEpisodes
764            from DT.fractureEpisodesPrevControl
765            group by fractureType, fractureSite;
NOTE: Table WORK.SUMMARYFRACTUREEPISODESPREV created, with 0 rows and 5 columns.

766          select * from Work.summaryFractureEpisodesPrev;
NOTE: No rows were selected.
767          select "DT.fractureEpisodesPrevControl" as table,
768                 sum(countDistinctPatid) as sumDistinctPatid,
769                 sum(countFractureEpisodes) as sumFractureEpisodes
770            from Work.summaryFractureEpisodesPrev;
                                                                  --- AS project ---                              13:29 Wednesday, October 4, 2017   2

                                                                               sumDistinct   sumFracture
                                              table                                  Patid      Episodes
                                              ----------------------------------------------------------
                                              DT.fractureEpisodesPrevControl                            
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                                              queryFracturesControl.sas
771        quit;
NOTE: The PROCEDURE SQL printed page 2.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.40 seconds
      cpu time            0.12 seconds
      

772        
773        
774        
775        
776        proc export
777          data = Work.summaryFractureEpisodesPrev
778          outfile = "data\processed\&cmt..csv"
779          dbms = csv
780          replace;
781          delimiter = '09'x;
782        run;

NOTE: No observations in data set WORK.SUMMARYFRACTUREEPISODESPREV.
NOTE: Data set has 0 observations.
783         /**********************************************************************
784         *   PRODUCT:   SAS
785         *   VERSION:   9.4
786         *   CREATOR:   External File Interface
787         *   DATE:      04OCT17
788         *   DESC:      Generated SAS Datastep Code
789         *   TEMPLATE SOURCE:  (None Specified.)
790         ***********************************************************************/
791            data _null_;
792            %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
793            %let _EFIREC_ = 0;     /* clear export record count macro variable */
16                                                                  The SAS System                                    13:29 Wednesday, October 4, 2017

794            file 'data\processed\queryFracturesControl.csv' delimiter='09'x DSD DROPOVER lrecl=32767;
795            if _n_ = 1 then        /* write column names or labels */
796             do;
797               put
798                  "table"
799               '09'x
800                  "fractureType"
801               '09'x
802                  "fractureSite"
803               '09'x
804                  "countDistinctPatid"
805               '09'x
806                  "countFractureEpisodes"
807               ;
808             end;
809           set  WORK.SUMMARYFRACTUREEPISODESPREV   end=EFIEOD;
810               format table $30. ;
811               format fractureType $35. ;
812               format fractureSite $30. ;
813               format countDistinctPatid best12. ;
814               format countFractureEpisodes best12. ;
815             do;
816               EFIOUT + 1;
817               put table $ @;
818               put fractureType $ @;
819               put fractureSite $ @;
820               put countDistinctPatid @;
821               put countFractureEpisodes ;
822               ;
823             end;
824            if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
825            if EFIEOD then call symputx('_EFIREC_',EFIOUT);
826            run;

NOTE: The file 'data\processed\queryFracturesControl.csv' is:
      Filename=U:\studies\AS\pgms\bchan\data\processed\queryFracturesControl.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=04Oct2017:13:29:36,
      Create Time=04Oct2017:13:29:36

NOTE: 1 record was written to the file 'data\processed\queryFracturesControl.csv'.
      The minimum record length was 72.
      The maximum record length was 72.
NOTE: There were 0 observations read from the data set WORK.SUMMARYFRACTUREEPISODESPREV.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

0 records created in data\processed\queryFracturesControl.csv from WORK.SUMMARYFRACTUREEPISODESPREV.
  
  
NOTE: "data\processed\queryFracturesControl.csv" file was successfully created.
NOTE: PROCEDURE EXPORT used (Total process time):
      real time           0.26 seconds
      cpu time            0.03 seconds
      

827        
828        
829        ods html close;
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           3.15 seconds
      cpu time            0.85 seconds
      
